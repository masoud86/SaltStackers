// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaltStackers.Data.Context;

#nullable disable

namespace SaltStackers.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "011b406e-94e4-480f-b0e3-d7ac50db372c",
                            RoleId = "72c2c695-2efd-4fcf-b083-dcb1f47fa314"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Financial.TaxProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TaxProfiles", "financial");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Log.ApplicationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupKey")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Level")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LogDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Logger")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LogDateTime");

                    b.HasIndex("ReceiptNumber");

                    b.HasIndex("RequestNumber");

                    b.ToTable("ApplicationLogs", "log");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Log.UserActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionRelatedId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Browser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BrowserVersion")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Content")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DescriptionParameters")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DescriptionResourceKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Device")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreateDateTime");

                    b.ToTable("UserActivitiesLogs", "log");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Message.EmailGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EmailGateways", "message");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Message.SmsGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("SmsGateways", "message");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Combo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StriptId")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Combos", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Customization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CalculateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal?>("Carbohydrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Changes")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cholesterol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("DietaryFiber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("Energy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("Iron")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("Protein")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SaturatedFat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("Sudium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("Sugars")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("TotalFat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("TransFat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("VitaminA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("VitaminC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("Zinc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Customizations", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("EmptyDescription")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Permalink")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Diets", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ProfitMargin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Foods", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.FoodAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAttachments", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("OrderPeriod")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Ingredients", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Permalink")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("IngredientCategories", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IngredientCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Permalink")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientCategoryId");

                    b.HasIndex("IngredientSubCategoryId");

                    b.ToTable("IngredientSubCategories", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(1m);

                    b.Property<string>("DisplayTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<string>("MixDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("NeedsPrep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("Pchef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientTypes", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientTypeAllergenAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllergenAlert")
                        .HasColumnType("int");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("IngredientTypeAllergenAlerts", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientTypeSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("IngredientSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientSubCategoryId");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("IngredientTypeSubCategories", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientTypeUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AmountFactor")
                        .HasColumnType("float");

                    b.Property<string>("AmountOperator")
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<string>("Amounts")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Carbohydrate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Cholesterol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("ConversionFactor")
                        .HasColumnType("float");

                    b.Property<decimal?>("DietaryFiber")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal?>("Energy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Iron")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPercent")
                        .HasColumnType("bit");

                    b.Property<bool>("MakeYourOwn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("PriceFactor")
                        .HasColumnType("float");

                    b.Property<string>("PriceOperator")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<decimal?>("ProfitMargin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Protein")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SaturatedFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Sudium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Sugars")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TransFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("VitaminA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VitaminC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Zinc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("IngredientTypeUnits", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Packages", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.PackageAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageAttachments", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.PackageGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageGroups", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.PackageGroupItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RecipeId");

                    b.ToTable("PackageGroupItems", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowNoAppleCider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("AllowNoPepper")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("AllowNoSalmonSkin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("AllowNoSalt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CalculateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("DefaultInCategory")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("HeatingInstruction")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNew")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOption")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRoutine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTwoStepCooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("MainMenu")
                        .HasColumnType("bit");

                    b.Property<bool>("Orderable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PackagingTime")
                        .HasColumnType("int");

                    b.Property<string>("PersonalChefId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("RecipeDetails")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeSize")
                        .HasColumnType("int");

                    b.Property<int>("RecipeType")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<string>("StripeId")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("PersonalChefId");

                    b.ToTable("Recipes", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeDiet", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("RecipeId", "DietId");

                    b.HasIndex("DietId");

                    b.ToTable("RecipeDiets", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeIngredientTypeAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProcessFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecipeIngredientTypeUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeIngredientTypeUnitId");

                    b.ToTable("RecipeIngredientTypeAmounts", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeIngredientTypeSubstitute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IngredientTypeUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProcessFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecipeIngredientTypeUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientTypeUnitId");

                    b.HasIndex("RecipeIngredientTypeUnitId");

                    b.ToTable("RecipeIngredientTypeSubstitutes", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeIngredientTypeUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("IngredientTypeUnitId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAddOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDressing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientTypeUnitId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredientTypeUnits", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeOverheadCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("OverheadCostId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OverheadCostId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeOverheadCosts", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("RecipeOwners", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("TagId");

                    b.ToTable("RecipeTags", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Permalink")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tags", "nutrition");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("ConversionFactor")
                        .HasColumnType("float");

                    b.Property<bool>("HasCustomConversionFactor")
                        .HasColumnType("bit");

                    b.Property<string>("Sign")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Units", "nutrition");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Solids",
                            ConversionFactor = 1.0,
                            HasCustomConversionFactor = false,
                            Sign = "g",
                            Title = "Gram"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Solids",
                            ConversionFactor = 1000.0,
                            HasCustomConversionFactor = false,
                            Sign = "kg",
                            Title = "Kilogram"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Solids",
                            ConversionFactor = 454.0,
                            HasCustomConversionFactor = false,
                            Sign = "lb",
                            Title = "Pound"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Solids",
                            ConversionFactor = 28.350000000000001,
                            HasCustomConversionFactor = false,
                            Sign = "oz",
                            Title = "Ounce"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Solids",
                            HasCustomConversionFactor = true,
                            Sign = "cup",
                            Title = "Cup"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Solids",
                            HasCustomConversionFactor = true,
                            Sign = "tbsp",
                            Title = "Table Spoon"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Solids",
                            HasCustomConversionFactor = true,
                            Sign = "tsp",
                            Title = "Tea Spoon"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Solids",
                            HasCustomConversionFactor = true,
                            Sign = "ea",
                            Title = "Each"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Solids",
                            ConversionFactor = 0.34999999999999998,
                            HasCustomConversionFactor = false,
                            Sign = "pinch",
                            Title = "Pinch"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Solids",
                            HasCustomConversionFactor = true,
                            Sign = "bunch",
                            Title = "Bunch"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Liquids",
                            ConversionFactor = 1.0,
                            HasCustomConversionFactor = false,
                            Sign = "ml",
                            Title = "Milliliter"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Liquids",
                            ConversionFactor = 1000.0,
                            HasCustomConversionFactor = false,
                            Sign = "l",
                            Title = "Liter"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Liquids",
                            ConversionFactor = 29.57,
                            HasCustomConversionFactor = false,
                            Sign = "fl-oz",
                            Title = "Fluid Ounce"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Liquids",
                            ConversionFactor = 236.56,
                            HasCustomConversionFactor = false,
                            Sign = "cup",
                            Title = "Cup"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Liquids",
                            ConversionFactor = 15.0,
                            HasCustomConversionFactor = false,
                            Sign = "tbsp",
                            Title = "Table Spoon"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Liquids",
                            ConversionFactor = 5.0,
                            HasCustomConversionFactor = false,
                            Sign = "tsp",
                            Title = "Tea Spoon"
                        });
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Operation.Kitchen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<double?>("Latitude")
                        .HasMaxLength(15)
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Logo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Longitude")
                        .HasMaxLength(15)
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("RecipeTaxProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RecipeTaxProfileId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("ZoneId");

                    b.ToTable("Kitchens", "operation");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Operation.KitchenRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("KitchenId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KitchenId");

                    b.HasIndex("RecipeId");

                    b.ToTable("KitchenRecipes", "operation");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Operation.KitchenUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<int>("KitchenId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("KitchenId");

                    b.HasIndex("UserId");

                    b.ToTable("KitchenUsers", "operation");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Operation.OverheadCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<decimal?>("DefaultValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OverheadCosts", "operation");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDismissable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedTracking")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Alerts", "settings");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.AlertUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlertId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ViewDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AlertId");

                    b.HasIndex("UserId");

                    b.ToTable("AlertUsers", "settings");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.ApplicationSetting", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ChangeDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("Key");

                    b.ToTable("ApplicationSettings", "settings");

                    b.HasData(
                        new
                        {
                            Key = "RoleValidationKey",
                            ChangeDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "6804a190-255a-4ea1-9960-374de2334d9e"
                        },
                        new
                        {
                            Key = "DefaultTimeZone",
                            ChangeDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "Pacific Daylight Time"
                        },
                        new
                        {
                            Key = "ReCaptchaSiteKey",
                            ChangeDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "6LdXzIYbAAAAAOJFykyyrl_tvFm2NI1PyTqMjIMp"
                        },
                        new
                        {
                            Key = "ReCaptchaSecretKey",
                            ChangeDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "6LdXzIYbAAAAACDsprm4U9yvY8wFpER6QSOWqh2d"
                        },
                        new
                        {
                            Key = "RecaptchaScoreThreshold",
                            ChangeDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "0.5"
                        });
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities", "settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EditDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            ProvinceId = 1,
                            Title = "Greater Vancouver"
                        });
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries", "settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EditDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Title = "Canada"
                        });
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces", "settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            EditDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Title = "BC - British Columbia"
                        });
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<decimal>("DeliveryPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Zones", "settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DeliveryPrice = 10m,
                            EditDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Title = "All"
                        });
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Membership.AspNetRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Icon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("AspNetRole");

                    b.HasData(
                        new
                        {
                            Id = "72c2c695-2efd-4fcf-b083-dcb1f47fa314",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            CreateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            DisplayName = "Administrator",
                            IsLocked = true
                        });
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Membership.AspNetUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("EditDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<int?>("KitchenId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Referral")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasIndex("KitchenId");

                    b.HasDiscriminator().HasValue("AspNetUser");

                    b.HasData(
                        new
                        {
                            Id = "011b406e-94e4-480f-b0e3-d7ac50db372c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c159afc-539f-4d73-b997-d23eea86b75c",
                            Email = "admin@saltstackers.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SALTSTACKERS.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEI0CynVzbtPbQD3eAMJft/5fjCYJbXaectUfMaDSh85aoH6XqLGQsyhEUMH6xP76Ng==",
                            PhoneNumber = "+16593716466",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "081c6cd0-07fb-457f-9e8e-92cea0fd4cae",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            CreateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAdmin = true,
                            IsBlocked = false,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Customization", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Recipe", "Recipe")
                        .WithMany("Customizations")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Membership.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.FoodAttachment", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Food", null)
                        .WithMany("Attachments")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Ingredient", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientSubCategory", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.IngredientCategory", "IngredientCategory")
                        .WithMany("IngredientSubCategories")
                        .HasForeignKey("IngredientCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Nutrition.IngredientSubCategory", null)
                        .WithMany("IngredientSubCategories")
                        .HasForeignKey("IngredientSubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("IngredientCategory");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientType", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Ingredient", "Ingredient")
                        .WithMany("IngredientTypes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientTypeAllergenAlert", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.IngredientType", "IngredientType")
                        .WithMany("AllergenAlerts")
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientTypeSubCategory", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.IngredientSubCategory", "IngredientSubCategory")
                        .WithMany()
                        .HasForeignKey("IngredientSubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Nutrition.IngredientType", "IngredientType")
                        .WithMany("IngredientTypeSubCategories")
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IngredientSubCategory");

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientTypeUnit", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.IngredientType", "IngredientType")
                        .WithMany("IngredientTypeUnits")
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Unit", "Unit")
                        .WithMany("IngredientTypeUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IngredientType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.PackageAttachment", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Package", "Package")
                        .WithMany("Attachments")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.PackageGroup", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Package", "Package")
                        .WithMany("Groups")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.PackageGroupItem", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.PackageGroup", "Group")
                        .WithMany("Items")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Recipe", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Food", "Food")
                        .WithMany("Recipes")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Membership.AspNetUser", "PersonalChef")
                        .WithMany("Recipes")
                        .HasForeignKey("PersonalChefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Food");

                    b.Navigation("PersonalChef");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeDiet", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Diet", "Diet")
                        .WithMany("RecipeDiets")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Recipe", "Recipe")
                        .WithMany("RecipeDiets")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeIngredientTypeAmount", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.RecipeIngredientTypeUnit", "RecipeIngredientTypeUnit")
                        .WithMany("OtherAmounts")
                        .HasForeignKey("RecipeIngredientTypeUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RecipeIngredientTypeUnit");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeIngredientTypeSubstitute", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.IngredientTypeUnit", "IngredientTypeUnit")
                        .WithMany()
                        .HasForeignKey("IngredientTypeUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Nutrition.RecipeIngredientTypeUnit", "RecipeIngredientTypeUnit")
                        .WithMany("Substitutes")
                        .HasForeignKey("RecipeIngredientTypeUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IngredientTypeUnit");

                    b.Navigation("RecipeIngredientTypeUnit");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeIngredientTypeUnit", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.IngredientTypeUnit", "IngredientTypeUnit")
                        .WithMany()
                        .HasForeignKey("IngredientTypeUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Recipe", "Recipe")
                        .WithMany("RecipeIngredientTypeUnits")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IngredientTypeUnit");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeOverheadCost", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Operation.OverheadCost", "OverheadCost")
                        .WithMany()
                        .HasForeignKey("OverheadCostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Recipe", "Recipe")
                        .WithMany("RecipeOverheadCosts")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OverheadCost");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeOwner", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Recipe", "Recipe")
                        .WithMany("RecipeOwners")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Membership.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeTag", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Recipe", "Recipe")
                        .WithMany("RecipeTags")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Operation.Kitchen", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Financial.TaxProfile", "RecipeTaxProfile")
                        .WithMany()
                        .HasForeignKey("RecipeTaxProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SaltStackers.Domain.Models.Setting.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RecipeTaxProfile");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Operation.KitchenRecipe", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Operation.Kitchen", "Kitchen")
                        .WithMany()
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Nutrition.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kitchen");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Operation.KitchenUser", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Operation.Kitchen", "Kitchen")
                        .WithMany()
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Membership.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kitchen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.AlertUser", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Setting.Alert", "Alert")
                        .WithMany("AlertUsers")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaltStackers.Domain.Models.Membership.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.City", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Setting.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.Province", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Setting.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.Zone", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Setting.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Membership.AspNetUser", b =>
                {
                    b.HasOne("SaltStackers.Domain.Models.Operation.Kitchen", "Kitchen")
                        .WithMany()
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Diet", b =>
                {
                    b.Navigation("RecipeDiets");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Food", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Ingredient", b =>
                {
                    b.Navigation("IngredientTypes");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientCategory", b =>
                {
                    b.Navigation("IngredientSubCategories");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientSubCategory", b =>
                {
                    b.Navigation("IngredientSubCategories");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.IngredientType", b =>
                {
                    b.Navigation("AllergenAlerts");

                    b.Navigation("IngredientTypeSubCategories");

                    b.Navigation("IngredientTypeUnits");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Package", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.PackageGroup", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Recipe", b =>
                {
                    b.Navigation("Customizations");

                    b.Navigation("RecipeDiets");

                    b.Navigation("RecipeIngredientTypeUnits");

                    b.Navigation("RecipeOverheadCosts");

                    b.Navigation("RecipeOwners");

                    b.Navigation("RecipeTags");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.RecipeIngredientTypeUnit", b =>
                {
                    b.Navigation("OtherAmounts");

                    b.Navigation("Substitutes");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Nutrition.Unit", b =>
                {
                    b.Navigation("IngredientTypeUnits");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Setting.Alert", b =>
                {
                    b.Navigation("AlertUsers");
                });

            modelBuilder.Entity("SaltStackers.Domain.Models.Membership.AspNetUser", b =>
                {
                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
